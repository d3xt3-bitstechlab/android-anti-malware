package isc.whu.defender;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.graphics.drawable.Drawable;
import android.net.TrafficStats;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;

/**
 * 流量监控器设置界面
 * 设置获取流量信息的时间间隔
 * @author Shao
 * @since 2012-02-02
 */
public class TrafficMonitor extends Activity {
	private ArrayList<AppInfo> appinfo = new ArrayList<AppInfo>();

	private Spinner spTimeInterval;
	private Button btnApply;
	private long timeInterval;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.traffic_monitor);
		
		spTimeInterval = (Spinner) findViewById(R.id.spinner_timne_interval);
		btnApply = (Button) findViewById(R.id.btn_apply);
		
		ArrayAdapter adapter = ArrayAdapter.createFromResource(this, 
				R.array.time_interval, android.R.layout.simple_spinner_item);
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spTimeInterval.setAdapter(adapter);
		
		spTimeInterval.setOnItemSelectedListener(new SpinnerItemSelectedListener());
		
		btnApply.setOnClickListener(new ButtonClickListener());
	}
	
	private class SpinnerItemSelectedListener implements OnItemSelectedListener {
		public void onItemSelected(AdapterView<?> parent, View v, int pos, long id) {
			timeInterval = 1000L;
			
			switch (pos) {
			case 0: // 1 day
				timeInterval *= 60 * 60 * 60 * 24;
				break;
			case 1: // 3 days
				timeInterval *= 60 * 60 * 60 * 24 * 3;
				break;
			case 2: // 7 days
				timeInterval *= 60 * 60 * 60 * 24 * 7;
				break;
				default:
			}
			
			System.out.println(timeInterval + " milliseconds");
		}
		
		public void onNothingSelected(AdapterView<?> parent) {
			System.out.println("Nothing selected");
		}
	}

	private class ButtonClickListener implements OnClickListener {
		public void onClick(View v) {
			
			Intent intent = new Intent(TrafficMonitor.this, AlarmReceiver.class);
			intent.setAction(AlarmReceiver.ALARM_ACTION);
			PendingIntent sender = PendingIntent.getBroadcast(
					TrafficMonitor.this, 0, intent, 0);
			AlarmManager am = (AlarmManager) getApplicationContext().getSystemService(ALARM_SERVICE);
			
			am.cancel(sender);
			
			Calendar c = Calendar.getInstance();
			// 获得当前年、月、日
			int year = c.get(Calendar.YEAR);
			int month= c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			int hour = 3; // 触发时间为3点
			
			// 设置第一次触发时间为本日3点
			Calendar cFirstTime = Calendar.getInstance();
			cFirstTime.set(year, month, day, hour, 0, 0);
			// 如果本日3点已过，设置为下一个3点
			long firsttime = cFirstTime.getTimeInMillis() > c.getTimeInMillis() ?
					cFirstTime.getTimeInMillis() : 
					cFirstTime.getTimeInMillis() + 1000 * 60 * 60 * 24;
					
			am.setRepeating(AlarmManager.RTC_WAKEUP, 
					firsttime, timeInterval, sender);
		}
	}
	
	/**
	 * 获得已安装应用程序的基本信息
	 * 
	 * @param getSysApp
	 *            true 包括系统应用，即/system/app中的应用程序 。false 不包括系统应用
	 * @return 包含多个应用程序的信息的表
	 */
	private ArrayList<AppInfo> getInstalledAppInfo(boolean getSysApp) {
		List<PackageInfo> packs = getPackageManager().getInstalledPackages(0);

		Iterator<PackageInfo> it = packs.iterator();
		PackageInfo p;
		while (it.hasNext()) {
			AppInfo info = new AppInfo();
			p = it.next();
			// if (p.applicationInfo.uid <= 10000)
			if ((!getSysApp)
					&& (p.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) > 0)
				continue;

			info.appName = p.applicationInfo.loadLabel(getPackageManager())
					.toString();
			info.packageName = p.packageName;
			info.uid = p.applicationInfo.uid;
			info.versionCode = p.versionCode;
			info.appIcon = p.applicationInfo.loadIcon(getPackageManager());

			// 获得流量数据，当无流量时返回TrafficStats.UNSUPPORTED，也就是-1
			// 直接加1变为0简化计算
			// 同时，不为-1时，误差可以接受
			info.dataSent = TrafficStats.getUidTxBytes(info.uid) + 1;
			info.dataReceived = TrafficStats.getUidRxBytes(info.uid) + 1;

			appinfo.add(info);

		}

		return appinfo;
	}

	/**
	 * 输出应用的信息，测试时使用
	 */
	private void outputAppInfo() {
		Iterator<AppInfo> it = appinfo.iterator();
		AppInfo tmp;
		while (it.hasNext()) {
			tmp = it.next();
			System.out.println(tmp.uid + ": " + tmp.appName + "Sent: "
					+ tmp.dataSent + " Received: " + tmp.dataReceived);
		}
	}

}

/**
 * 用来存储应用的基本信息
 * 
 * @author Shao
 * 
 */
class AppInfo {
	public String appName;
	public String packageName;
	public int uid;
	public int versionCode;
	public Drawable appIcon;
	public long dataSent;
	public long dataReceived;
}